import pandas as pd
from snakemake.utils import Paramspace
from scripts.utils import create_tasks_df
from pprint import pprint
import numpy as np

configfile: 'config.yaml'
tasks_df = create_tasks_df('config.yaml', save='data/tasks.tsv')
hashes = np.unique(tasks_df['hash'])
matched_methods = [tasks_df.loc[tasks_df['hash'] == h, 'method'].values[0] for h in hashes]
matched_tasks = [tasks_df.loc[tasks_df['hash'] == h, 'task'].values[0] for h in hashes]
#methods = np.unique(tasks_df['method'])
tasks = np.unique(tasks_df['task'])

rule run_method:
    #input:
     #   lambda wildcards: config['TASKS'][wildcards.task]['input']
    output:
        tsv='data/reports/{task}/{method}/{hash}/accuracy.tsv'
    params:
        # label_key=lambda wildcards: config['TASKS'][wildcards.task]['label_key'],
        # batch_key=lambda wildcards: config['TASKS'][wildcards.task]['batch_key'],
        # condition_key=lambda wildcards: config['TASKS'][wildcards.task]['condition_key'],
        # sample_key=lambda wildcards: config['TASKS'][wildcards.task]['sample_key'],
        # n_splits=lambda wildcards: config['TASKS'][wildcards.task]['n_splits'],
        #params=lambda wildcards: config['METHOD_PARAMS'][wildcards.method]['params'],
        params=lambda wildcards: tasks_df.loc[tasks_df['hash'] == wildcards.hash, :].iloc[0, :].to_dict()
    conda:
        'envs/multigrate_pipeline.yaml'
    script:
        'scripts/run_method.py'

rule merge:
    input:
        expand(
            rules.run_method.output.tsv,
            zip,
            task=matched_tasks,
            method=matched_methods,
            hash=hashes,
        )
    output:
        tsv='data/reports/methods.tsv'
    run:
        input_files = [input] if isinstance(input, str) else input
        dfs = [pd.read_table(file) for file in input_files if os.path.exists(file)]
        metrics_df = pd.concat(dfs)
        print(metrics_df)
        metrics_df.to_csv(output.tsv, sep='\t', index=False)

rule find_best_per_task:
    input:
        tsv='data/reports/methods.tsv'
    output:
        tsv='data/reports/best.tsv'
    params:
        config=config
    script:
        'scripts/find_best.py'

rule plot_accuracy:
    input:
        tsv='data/reports/best.tsv'
    output:
        expand('data/reports/{task}_accuracy.png', task=tasks)
    conda:
	'envs/multigrate_pipeline.yaml'
    script:
        'scripts/plot_accuracy.py'

rule all:
    input:
        expand('data/reports/{task}_accuracy.png', task=tasks)
    default_target: True
